(print '\t')
(print '(hello world))
(prints '!' '! "!" ''!' ''! '"!")
(print 2 '+ '2 '= (+ 2 2))
(print 2 '+ 3 '+ 4 '= (+ 2 3 4))

(def x (+ 40 2))
(print x)

(def x (+ x 2))
(print x)

(prints "<<< check special atoms >>>")
(print '(, ,@ b ,a ,@a))
(prints ''(1 2 3))
(prints `(1 ,(+ 1 1) 3 ,@(cons 4 (cons 5 nil)) 6))
(prints `(defmacro ,",name," (print ,",args," ,@'(",body,"))))

(prints "<<< check lists >>>")
(print (cons 'a (cons 1 nil)))
(def make-tree
     (lambda ()
         (cons 'a
                (cons '(1 2 3)
                      nil))))
(def tree (make-tree))
(print tree)
(print (head (head (tail tree))))

(prints "<<< check functions >>>")
(def
    foo
    (lambda (a b)
        (prints "(" 'foo a b ")" '--> (+ a b))
        (print 'x '= x)
        (+ a b)))
(foo 5 -6)
(def get-nil (lambda nil nil))
(get-nil)

(def print-to-10 (lambda (&optional (n 0))
    (cond
        ((not (eq n 11))
            (print n)
            (print-to-10 (+ n 1))))
))
(print-to-10)

(print (list 1 2 (+ 1 2)))

(prints "<<< cond tests >>>")
(print nil (cond))
(cond ((not 0) (error "never executed")
      (nil (error "never executed"))))
(cond ((not 0) (error "never executed")
      (nil (error "never executed")))
      (T (prints "Hello")))
(cond ((not 0) (error "never executed"))
      (T (prints "Hello"))
      (T (error "never executed"))
      (atom not binded))
(print 2 (cond (nil 1) (1 2)))

(prints "<<< gensym tests >>>")
(print (gensym)) // #:1
(set *gensym-counter* 5)
(print (gensym)) // #:5
(set *gensym-counter* 1)
(print (gensym)) // #:2
(print (gensym)) // #:3

(prints "<<< macro tests >>>")
(defun foo (a b &rest c) (+ a b))
(prints "foo-def end")
(prints "2 + 3 =" (foo 2 3 4 5 6))
(defun ret-nil ())
(prints "ret-nil result:" (ret-nil))
(print (macroexpand 'defun '(bar (a b &rest c) 1 2 3)))

(prints "<<< RUN GARBAGE COLLECTOR >>>")
(defun run-gc ()
    (def gc-res (gc-collect))
    (def gc-atoms (head gc-res))
    (def gc-pairs (head (tail gc-res)))
    (def gc-objects (head (tail (tail gc-res))))
    (prints "garbage collected")
    (prints "\tatoms:" gc-atoms)
    (prints "\tpairs:" gc-pairs)
    (prints "\tobjects:" gc-objects)
)
(run-gc)

(defmacro assert-equals (actual expected)
    `(unless (equals ,actual ,expected)
        (prints
            "Assertation failed"
            "\nActual:  " (quote ,actual) "-->" ,actual
            "\nExpected:" (quote ,expected) "-->" ,expected)))

(prints "                    <<< assert test >>> (2 == 2) (2 != 3)")
(assert-equals 2 2)
(assert-equals 2 3)

(prints "<<< context tests >>>")
(def global-val-1 "Unchanged")
(def global-val-2 "Unchanged")

(defun set-global-val ()
    (set global-val-1 "Changed") // global
    (def global-val-2 "Changed") // local
)
(set-global-val)
(assert-equals global-val-1 "Changed")
(assert-equals global-val-2 "Unchanged")

(prints "<<< set pair test >>>")
(def res '(1 2))
(set-head res 'head)
(set-tail res '(tail))
(assert-equals res '(head tail))

(when T
    (prints "success")
    (prints "======="))
(when nil
    (prints "FAILED")
    (prints "======="))
(unless nil
    (prints "success")
    (prints "======="))
(unless T
    (prints "FAILED")
    (prints "======="))

(prints "                    <<< let tests >>>")
(let ((a 2) (b 3) (c) (d a))
    (assert-equals a 2)
    (assert-equals b 3)
    (assert-equals c nil)
    (assert-equals d 2)
)

(let nil nil)
(let ((a)) a)
(let ((a 1)) a)

(prints "                    <<< test logic >>>")
(prints "<<< eq >>>")
(assert-equals (eq 'a 'a) t)
(assert-equals (eq 1 1) t)
(assert-equals (eq 1 2) nil)
(assert-equals (eq 'a 'b) nil)
(assert-equals (eq '(1) '(1)) nil)
(prints "<<< and >>>")
(assert-equals (and 1 2) t)
(assert-equals (and 1 1 nil never-executed) nil)
(assert-equals (and) t)
(assert-equals (and nil) nil)
(prints "<<< or >>>")
(assert-equals (or) nil)
(assert-equals (or 1) t)
(assert-equals (or 1 nil never-executed) t)
(prints "<<< not >>>")
(assert-equals (not nil) t)
(assert-equals (not '(2 3)) nil)
(prints "<<< xor >>>")
(assert-equals (xor) nil)
(assert-equals (xor nil) nil)
(assert-equals (xor 1) t)
(assert-equals (xor nil 1 nil) t)
(assert-equals (xor nil 1 nil 1) nil)

(prints "                    <<< test math >>>")
(prints "<< sum >>>")
(assert-equals (+) 0)
(assert-equals (+ 1) 1)
(assert-equals (+ 1 2) 3)
(assert-equals (+ 1 -2) -1)
(assert-equals (+ 1 -2 3) 2)
(assert-equals (+ (+ 1 2 -2) 2 (+ 1 2)) 6)
(assert-equals (+ (+ 1 2 -2) 2.0 (+ (- '1' '0') 2)) 6.0)
(prints "<< difference >>>")
(assert-equals (- 1) -1)
(assert-equals (- -1) 1)
(assert-equals (- 2 1) 1)
(assert-equals (- 3 0) 3)
(assert-equals (- 3 -3 4 5) -3)
(assert-equals (- '3' -3 '6' 5.0) -5.0)
(prints "<< product >>>")
(assert-equals (*) 1)
(assert-equals (* 0) 0)
(assert-equals (* 3) 3)
(assert-equals (* 2 3) 6)
(assert-equals (* 2 3 5) 30)
(assert-equals (* 2 3 -5) -30)
(prints "<< quotient >>>")
(assert-equals (/ 1) 1)
(assert-equals (/ 3) 0)
(assert-equals (/ 2.0) 0.5)
(assert-equals (/ -2.0) -0.5)
(assert-equals (/ -1) -1)
(assert-equals (/ -1.0) -1.0)
(assert-equals (/ 6 2) 3)
(assert-equals (/ 6 3) 2)
(assert-equals (/ 6 4) 1)
(assert-equals (/ 6 6) 1)
(assert-equals (/ 6 7) 0)
(assert-equals (/ 6 2 1) 3)
(assert-equals (/ 6 2 2) 1)
(assert-equals (/ 8 2.0 2) 2.0)
(assert-equals (/ 9 2 2) 2)
(prints "<< remainder >>>")
(assert-equals (% 6 2) 0)
(assert-equals (% 6 3) 0)
(assert-equals (% 6 4) 2)
(assert-equals (% 6 6) 0)
(assert-equals (% 6 7) 6)
(assert-equals (% '1' '2') '1')
(assert-equals (% '2' '1') (- '1' '0'))

(prints "                    <<< numbers test >>>")
(prints "<<< parsing tests >>>")
(assert-equals -1 (- 1))
(assert-equals 0xff 255)
(assert-equals 0xA 10)
(assert-equals 0o12 10)
(assert-equals 0b1010 10)
(assert-equals 0o12 0xA)
(assert-equals 0b1010 0xA)
(assert-equals 0b1010 0o12)
(prints "<<< comparision tests >>>")
(assert-equals (<) T)
(assert-equals (< 1) T)
(assert-equals (< 1 2) T)
(assert-equals (< 1 2 3) T)
(assert-equals (< 1 2 2) nil)
(assert-equals (< 1 2 0) nil)
(assert-equals (< 1.0 2 '3') T)
(assert-equals (< 1.0 '3' 2) nil)
(assert-equals (<=) T)
(assert-equals (<= 1) T)
(assert-equals (<= 1 2) T)
(assert-equals (<= 1 2 3) T)
(assert-equals (<= 1 2 2) T)
(assert-equals (<= 1 2 0) nil)
(assert-equals (<= 1.0 2 '3') T)
(assert-equals (<= 1.0 '3' 2) nil)
(assert-equals (<= 1.5 2 2 2.5 2.7 'A') T)
(assert-equals (==) T)
(assert-equals (== 1) T)
(assert-equals (== 1 '1') nil)
(assert-equals (== 0 '\0') T)
(assert-equals (== 1 1.0) T)
(assert-equals (== 32 32.0 ' ') T)

(prints "                    <<< predicates test >>>")
(assert-equals (atom? 'a) T)
(assert-equals (atom? nil) T)

(assert-equals (pair? (cons 'a 'b)) T)
(assert-equals (pair? '(a b)) T)
(assert-equals (pair? nil) nil)

(assert-equals (char? '1') T)
(assert-equals (char? 1) nil)
(assert-equals (char? 1.0) nil)
(assert-equals (char? "1") nil)

(assert-equals (int? 1) T)
(assert-equals (int? '1') nil)
(assert-equals (int? 1.0) nil)

(assert-equals (real? 1.0) T)
(assert-equals (string? "") T)
(assert-equals (function? lambda) T)
(assert-equals (function? (lambda nil nil)) T)
(assert-equals (macro? lambda) nil)
(assert-equals (macro? (getm defmacro)) T)

(assert-equals (integer? 1) T)
(assert-equals (integer? 'a') T)
(assert-equals (integer? 1.0) nil)

(assert-equals (number? 1) T)
(assert-equals (number? 'a') T)
(assert-equals (number? 1.0) T)
(assert-equals (number? nil) nil)

(assert-equals (list? nil) T)
(assert-equals (list? '(1)) T)
(assert-equals (list? '(1 2 3)) T)
(assert-equals (list? (cons 'a 'b)) nil)
(assert-equals (list? (cons 'a (cons 'b 'c))) nil)
(assert-equals (list? 'a) nil)
(assert-equals (list? 1) nil)

(prints "                    <<< stdlib tests >>>")
(prints "<<< length >>>")
(assert-equals (length '(1 2 3 4)) 4)
(assert-equals (length '(1 2 () 4)) 4)
(assert-equals (length '()) 0)

(prints "                    <<< str-lib tests >>>")
(prints "<<< str-len >>>")
(assert-equals (str-len "") 0)
(assert-equals (str-len "123") 3)
(assert-equals (str-len "12\034") 5)
(assert-equals (str-len "1234\0\0") 6)

(prints "<<< str-at >>>")
(assert-equals (str-at "1" 0) '1')
(assert-equals (str-at "\0" 0) '\0')
(assert-equals (str-at "01234" 3) '3')
(assert-equals (str-at "01234" 4) '4')

(prints "<<< str-to-list >>>")
(assert-equals (str-to-list "0123456" 2) '( '2' '3' '4' '5' '6'))
(assert-equals (str-to-list "0123456" 2 3) '( '2' '3' '4'))
(assert-equals (str-to-list "0123456" 0 0) nil)

(prints "<<< str-from-list >>>")
// Ambigous syntax: quote before list of chars
// Solution put a space between oppening bracket and first item
(assert-equals (str-from-list '( '0' '1' '2')) "012")
(assert-equals (str-from-list nil) "")

(prints "<<< str-repeat >>>")
(assert-equals (str-repeat '1' 4) "1111")
(assert-equals (str-repeat '1' 0) "")
(assert-equals (str-repeat "12" 4) "12121212")
(assert-equals (str-repeat "12" 0) "")

(prints "<<< str-cmp >>>")
(assert-equals (str-cmp "" "") 0)
(assert-equals (str-cmp "1" "1") 0)
(assert-equals (str-cmp "!!23" 2 "0123" 2) 0)
(assert-equals (str-cmp "0" 0  1 "0123" 0 1) 0)

(assert-equals (str-cmp "1" "12") -1)
(assert-equals (str-cmp "1" "2") -1)
(assert-equals (str-cmp "!!23" 2 "0124" 2) -1)
(assert-equals (str-cmp "0" 0  1 "1123" 0 1) -1)

(assert-equals (str-cmp "12" "1") 1)
(assert-equals (str-cmp "11" "1") 1)
(assert-equals (str-cmp "!!23" 2 "0122" 2) 1)
(assert-equals (str-cmp "0" 0  1 "!123" 0 1) 1)

(prints "<<< str-cat >>>")
(assert-equals (str-cat) "")
(assert-equals (str-cat "") "")
(assert-equals (str-cat "" "") "")

(assert-equals (str-cat "1") "1")
(assert-equals (str-cat "ab") "ab")
(assert-equals (str-cat "abc\0def") "abc\0def")

(assert-equals (str-cat "" "1") "1")
(assert-equals (str-cat "" "1" "") "1")
(assert-equals (str-cat "" "1" "2") "12")
(assert-equals (str-cat "" "1" "2" "\0") "12\0")

(assert-equals (str-cat "!" "1") "!1")
(assert-equals (str-cat "!" "1" "") "!1")
(assert-equals (str-cat "!" "1" "2") "!12")
(assert-equals (str-cat "!" "1" "2" "\0") "!12\0")

(prints "<<< str-ind >>>")
(assert-equals (str-ind "" "") 0)
(assert-equals (str-ind "123" "") 0)
(assert-equals (str-ind "123" "abc") -1)
(assert-equals (str-ind "0123456789" "45") 4)
(assert-equals (str-ind "012345456789" "45") 4)
(assert-equals (str-ind "+-+-45456789" "45" 5 3) 6)
(assert-equals (str-ind "=-=-4545=-=-" "45" 6) 6)
(assert-equals (str-ind "=-=-4545=-=-" "45" 5) 6)
(assert-equals (str-ind "=-=-4545=-=-" "45" 5 2) -1)
(assert-equals (str-ind "=-=-4545=-=-" "45" 5 4) 6)
(assert-equals (str-ind "=-=-0123=-=-" "0" 4 4) 4)
(assert-equals (str-ind "=-=-0123=-=-" "01" 4 4) 4)
(assert-equals (str-ind "=-=-0123=-=-" "3" 4 4) 7)
(assert-equals (str-ind "=-=-0123=-=-" "23" 4 4) 6)
(assert-equals (str-ind "=-=-0123=-=-" "0123" 4 4) 4)
(assert-equals (str-ind "=-=-0123=-=-" "0123=" 4 4) -1)
(assert-equals (str-ind "=-=-0123=-=-" "-0123" 4 4) -1)

(assert-equals (str-ind "" 'a') -1)
(assert-equals (str-ind "-123=" '1') 1)
(assert-equals (str-ind "-123=" '3') 3)
(assert-equals (str-ind "-123=" '1' 1 3) 1)
(assert-equals (str-ind "-123=" '3' 1 3) 3)
(assert-equals (str-ind "-123=" '1' 1 0) -1)
(assert-equals (str-ind "-123=" '1' 5 0) -1)
(assert-equals (str-ind "-123=" '-' 1 3) -1)
(assert-equals (str-ind "-123=" '=' 1 3) -1)

(prints "<<< str-last-ind >>>")
(assert-equals (str-last-ind "" "") 0)
(assert-equals (str-last-ind "012" "0") 0)
(assert-equals (str-last-ind "123" "") 3)
(assert-equals (str-last-ind "123" "abc") -1)
(assert-equals (str-last-ind "0123456789" "45") 4)
(assert-equals (str-last-ind "012345456789" "45") 6)
(assert-equals (str-last-ind "+-+-45456789" "45" 5 3) 4)
(assert-equals (str-last-ind "+-+-45456789" "45" 6 3) 4)
(assert-equals (str-last-ind "+-+-45456789" "45" 7 3) 6)
(assert-equals (str-last-ind "=-=-4545=-=-" "45" 6 2) -1)
(assert-equals (str-last-ind "=-=-4545=-=-" "45" 5 2) 4)
(assert-equals (str-last-ind "=-=-4545=-=-" "45" 7 2) 6)
(assert-equals (str-last-ind "=-=-4545=-=-" "5=" 7 2) -1)
(assert-equals (str-last-ind "=-=-4545=-=-" "-4" 5 2) -1)
(assert-equals (str-last-ind "111" "1" 1 0) -1)
(assert-equals (str-last-ind "111" "1" 3 0) -1)
(assert-equals (str-last-ind "111" "1" 3 1) -1)
(assert-equals (str-last-ind "111" "1" 3 2) 2)
(assert-equals (str-last-ind "111" "" 3 0) 3)
(assert-equals (str-last-ind "111" "" 3 1) 3)
(assert-equals (str-last-ind "111" "" 3 2) 3)
(assert-equals (str-last-ind "012" "1") 1)
(assert-equals (str-last-ind "012" "2") 2)
(assert-equals (str-last-ind "0122" "2") 3)
(assert-equals (str-last-ind "0122" "2" 2) 2)

(assert-equals (str-last-ind "" '0') -1)
(assert-equals (str-last-ind "-1233=" '1') 1)
(assert-equals (str-last-ind "-1233=" '3') 4)
(assert-equals (str-last-ind "-1233=" '1' 4 4) 1)
(assert-equals (str-last-ind "-1233=" '3' 4 4) 4)
(assert-equals (str-last-ind "-1233=" '-' 4 4) -1)
(assert-equals (str-last-ind "-1233=" '=' 4 4) -1)
(assert-equals (str-last-ind "-1233=" '3' 3 3) 3)
(assert-equals (str-last-ind "-1233=" '1' 1 0) -1)
(assert-equals (str-last-ind "-1233=" '3' 6 0) -1)
(assert-equals (str-last-ind "-1233=" '=' 6 1) -1)
(assert-equals (str-last-ind "-1233=" '=' 6 2) 5)

(assert-equals (str-last-ind "012" '0') 0)
(assert-equals (str-last-ind "111" '1' 1 0) -1)
(assert-equals (str-last-ind "111" '1' 3 0) -1)
(assert-equals (str-last-ind "111" '1' 3 1) -1)
(assert-equals (str-last-ind "111" '1' 3 2) 2)
(assert-equals (str-last-ind "012" '1') 1)
(assert-equals (str-last-ind "012" '2') 2)
(assert-equals (str-last-ind "0122" '2') 3)
(assert-equals (str-last-ind "0122" '2' 2) 2)

(prints "<<< str-insert >>>")
(assert-equals (str-insert "" 0 "") "")
(assert-equals (str-insert "" 0 "+") "+")
(assert-equals (str-insert "01234" 0 "") "01234")
(assert-equals (str-insert "01234" 0 "+") "+01234")
(assert-equals (str-insert "01234" 1 "+") "0+1234")
(assert-equals (str-insert "01234" 4 "+") "0123+4")
(assert-equals (str-insert "01234" 5 "+") "01234+")

(assert-equals (str-insert "01234" 0 "++") "++01234")
(assert-equals (str-insert "01234" 1 "++") "0++1234")
(assert-equals (str-insert "01234" 4 "++") "0123++4")
(assert-equals (str-insert "01234" 5 "++") "01234++")

(assert-equals (str-insert "" 0 '+') "+")
(assert-equals (str-insert "01234" 0 '+') "+01234")
(assert-equals (str-insert "01234" 1 '+') "0+1234")
(assert-equals (str-insert "01234" 4 '+') "0123+4")
(assert-equals (str-insert "01234" 5 '+') "01234+")

(prints "<<< str-sub >>>")
(assert-equals (str-sub "" 0 0) "")
(assert-equals (str-sub "01234" 0) "01234")
(assert-equals (str-sub "01234" 1) "1234")
(assert-equals (str-sub "01234" 2) "234")
(assert-equals (str-sub "01234" 4) "4")
(assert-equals (str-sub "01234" 5) "")
(assert-equals (str-sub "01234" 0 3) "012")
(assert-equals (str-sub "01234" 1 3) "123")
(assert-equals (str-sub "01234" 2 2) "23")
(assert-equals (str-sub "01234" 4 1) "4")
(assert-equals (str-sub "01234" 5 0) "")

(prints "<<< str-remove >>>")
(assert-equals (str-remove "" 0 0) "")
(assert-equals (str-remove "-----" 0) "")
(assert-equals (str-remove "0----" 1) "0")
(assert-equals (str-remove "01---" 2) "01")
(assert-equals (str-remove "0123-" 4) "0123")
(assert-equals (str-remove "01234" 5) "01234")
(assert-equals (str-remove "---34" 0 3) "34")
(assert-equals (str-remove "0---4" 1 3) "04")
(assert-equals (str-remove "01--4" 2 2) "014")
(assert-equals (str-remove "0123-" 4 1) "0123")
(assert-equals (str-remove "01234" 5 0) "01234")

(prints "<<< to-upper >>>")
(assert-equals (to-upper "") "")
(assert-equals (to-upper "0123") "0123")
(assert-equals (to-upper "abc") "ABC")
(assert-equals (to-upper "aB-c") "AB-C")
(assert-equals (to-upper "AB C") "AB C")
(assert-equals (to-upper "a") "A")
(assert-equals (to-upper "b") "B")
(assert-equals (to-upper "C") "C")
(assert-equals (to-upper 'a') 'A')
(assert-equals (to-upper 'b') 'B')
(assert-equals (to-upper 'C') 'C')

(prints "<<< to-lower >>>")
(assert-equals (to-lower "") "")
(assert-equals (to-lower "0123") "0123")
(assert-equals (to-lower "ABC") "abc")
(assert-equals (to-lower "Ab-C") "ab-c")
(assert-equals (to-lower "ab c") "ab c")
(assert-equals (to-lower "A") "a")
(assert-equals (to-lower "B") "b")
(assert-equals (to-lower "c") "c")
(assert-equals (to-lower 'A') 'a')
(assert-equals (to-lower 'B') 'b')
(assert-equals (to-lower 'c') 'c')

(prints "<<< str eq >>>")
(assert-equals (eq "123" "123") T)
(assert-equals (eq "123" "1234") nil)
(assert-equals (eq "" "") T)
(assert-equals (eq "" "1") nil)
(assert-equals (eq "1" "") nil)

(prints "<<< str-contains >>>")
(assert-equals (str-contains "" "") T)
(assert-equals (str-contains "123" "") T)
(assert-equals (str-contains "123" "abc") nil)
(assert-equals (str-contains "0123456789" "45") T)
(assert-equals (str-contains "012345456789" "45") T)
(assert-equals (str-contains "+-+-45456789" "45" 5 3) T)
(assert-equals (str-contains "=-=-4545=-=-" "45" 6) T)
(assert-equals (str-contains "=-=-4545=-=-" "45" 5) T)
(assert-equals (str-contains "=-=-4545=-=-" "45" 5 2) nil)
(assert-equals (str-contains "=-=-4545=-=-" "45" 5 4) T)
(assert-equals (str-contains "=-=-0123=-=-" "0" 4 4) T)
(assert-equals (str-contains "=-=-0123=-=-" "01" 4 4) T)
(assert-equals (str-contains "=-=-0123=-=-" "3" 4 4) T)
(assert-equals (str-contains "=-=-0123=-=-" "23" 4 4) T)
(assert-equals (str-contains "=-=-0123=-=-" "0123" 4 4) T)
(assert-equals (str-contains "=-=-0123=-=-" "0123=" 4 4) nil)
(assert-equals (str-contains "=-=-0123=-=-" "-0123" 4 4) nil)

(assert-equals (str-contains "" 'a') nil)
(assert-equals (str-contains "-123=" '1') T)
(assert-equals (str-contains "-123=" '3') T)
(assert-equals (str-contains "-123=" '1' 1 3) T)
(assert-equals (str-contains "-123=" '3' 1 3) T)
(assert-equals (str-contains "-123=" '1' 1 0) nil)
(assert-equals (str-contains "-123=" '1' 5 0) nil)
(assert-equals (str-contains "-123=" '-' 1 3) nil)
(assert-equals (str-contains "-123=" '=' 1 3) nil)

(prints "<<< str-starts-with >>>")
(assert-equals (str-starts-with "" "") T)
(assert-equals (str-starts-with "1" "") T)
(assert-equals (str-starts-with "12" "") T)
(assert-equals (str-starts-with "==123" "=") T)
(assert-equals (str-starts-with "==123" "==") T)
(assert-equals (str-starts-with "_=123" "=") nil)
(assert-equals (str-starts-with "_==123" "==") nil)
(assert-equals (str-starts-with "==123" '=') T)
(assert-equals (str-starts-with "_=123" '=') nil)

(prints "<<< str-ends-with >>>")
(assert-equals (str-ends-with "" "") T)
(assert-equals (str-ends-with "1" "") T)
(assert-equals (str-ends-with "12" "") T)
(assert-equals (str-ends-with "123==" "=") T)
(assert-equals (str-ends-with "123==" "==") T)
(assert-equals (str-ends-with "123=_" "=") nil)
(assert-equals (str-ends-with "123==_" "==") nil)
(assert-equals (str-ends-with "123==" '=') T)
(assert-equals (str-ends-with "123=_" '=') nil)

(prints "<<< str-empty? >>>")
(assert-equals (str-empty? "") T)
(assert-equals (str-empty? nil) T)
(assert-equals (str-empty? " ") nil)
(assert-equals (str-empty? "1") nil)

(prints "<<< str-join >>>")
(assert-equals (str-join ", " '()) "")
(assert-equals (str-join ", " '("1")) "1")
(assert-equals (str-join ", " '("1" "2")) "1, 2")
(assert-equals (str-join ", " '("1" "2" "3")) "1, 2, 3")
(assert-equals (str-join ", " '("1" "2" "3")) "1, 2, 3")
(assert-equals (str-join ", " '("1" "2" "" "3")) "1, 2, , 3")
(assert-equals (str-join ", " '("1" "2" " " "3")) "1, 2,  , 3")

(prints "<<< str-split >>>")
(assert-equals (str-split "" ", ") '(""))
(assert-equals (str-split "" ", " T) '())
(assert-equals (str-split "1" ", ") '("1"))
(assert-equals (str-split "1, 2" ", ") '("1" "2"))
(assert-equals (str-split "1, 2, 3" ", ") '("1" "2" "3"))
(assert-equals (str-split "1, 2, , 3" ", ") '("1" "2" "" "3"))
(assert-equals (str-split "1, 2, , 3" ", " T) '("1" "2" "3"))

(prints "<<< str->int >>>")
(assert-equals (str->int "") 0)
(assert-equals (str->int "+") 0)
(assert-equals (str->int "-") 0)
(assert-equals (str->int "0") 0)
(assert-equals (str->int "+0") +0)
(assert-equals (str->int "+0") 0)
(assert-equals (str->int "-0") 0)
(assert-equals (str->int "-0") -0)
(assert-equals (str->int "+1") +1)
(assert-equals (str->int "-1") -1)
(assert-equals (str->int "+3457") +3457)
(assert-equals (str->int "-3457") -3457)
(assert-equals (str->int "+000003457") +3457)
(assert-equals (str->int "-000003457") -3457)
(assert-equals (str->int "00000345070") 345070)

(prints "<<< int->str >>>")
(assert-equals (int->str 0) "0")
(assert-equals (int->str -0) "0")
(assert-equals (int->str -1) "-1")
(assert-equals (int->str 1234) "1234")
(assert-equals (int->str -1234) "-1234")
(assert-equals (int->str -12003400) "-12003400")
(assert-equals (int->str 0xabcdef0123 16) "abcdef0123")
(assert-equals (int->str 0b0111 2) "111")

/*(prints "<<< fromat >>>")
(defun format-get-at (str i)
    (when (or (< i 0) (>= i (str-len)))
        (error "format: invalid format string"))
    (str-at str i)
)
(defun fromat-read-part (str i args)
    (cond
        ((str-cmp str i 2 "{{" 0 2) "{")
        ((str-cmp str i 2 "}}" 0 2) "{")
        ((str-cmp str i 1 "{" 0 1)
            (let ((close-pos (str-ind str '}' i)))
                
            )
        )
    )
)
(defun format (fmt &rest args)
    (unless (string? fmt)
        (error "format: argument format not a string"))
    
)
(assert-equals (format "") "")
(assert-equals (format "Hello!!!") "Hello!!!")
(assert-equals (format "123{{0}}321") "123{{0}}321")
(assert-equals (format "Hello!!!" "!@#$%^&*()") "Hello!!!")
(assert-equals (format "Hello {0}!!!" "world") "Hello world")
(assert-equals (format "Hello {1}r{0}!!!" "ld" "wo") "Hello world")
(assert-equals (format "int a = {0}" -123) "int a = -123")
(assert-equals (format "{0}" '!') "1")*/


(print '\t')
(print '(hello world))
(prints '!' '! "!" ''!' ''! '"!")
(print 2 '+ '2 '= (+ 2 2))
(print 2 '+ 3 '+ 4 '= (+ 2 3 4))

(def x (+ 40 2))
(print x)

(def x (+ x 2))
(print x)

(prints "<<< check special atoms >>>")
(print '(, ,@ b ,a ,@a))
(prints ''(1 2 3))
(prints `(1 ,(+ 1 1) 3 ,@(cons 4 (cons 5 nil)) 6))
(prints `(defmacro ,",name," (print ,",args," ,@'(",body,"))))

(prints "<<< check lists >>>")
(print (cons 'a (cons 1 nil)))
(def make-tree
     (lambda ()
         (cons 'a
                (cons '(1 2 3)
                      nil))))
(def tree (make-tree))
(print tree)
(print (head (head (tail tree))))

(prints "<<< check functions >>>")
(def
    foo
    (lambda (a b)
        (prints "(" 'foo a b ")" '--> (+ a b))
        (print 'x '= x)
        (+ a b)))
(foo 5 -6)
(def get-nil (lambda nil nil))
(get-nil)

(def print-to-10 (lambda (&optional (n 0))
    (cond
        ((not (eq n 11))
            (print n)
            (print-to-10 (+ n 1))))
))
(print-to-10)

(print (list 1 2 (+ 1 2)))

(prints "<<< cond tests >>>")
(print nil (cond))
(cond ((not 0) (prints "never executed")
      (nil (prints "never executed"))))
(cond ((not 0) (prints "never executed")
      (nil (prints "never executed")))
      (T (prints "Hello")))
(cond ((not 0) (prints "never executed"))
      (T (prints "Hello"))
      (T (prints "never executed"))
      (atom not binded))
(print 2 (cond (nil 1) (1 2)))

(prints "<<< gensym tests >>>")
(print (gensym)) // #:1
(set *gensym-counter* 5)
(print (gensym)) // #:5
(set *gensym-counter* 1)
(print (gensym)) // #:2
(print (gensym)) // #:3

(prints "<<< macro tests >>>")
(defun foo (a b &rest c) (+ a b))
(prints "foo-def end")
(prints "2 + 3 =" (foo 2 3 4 5 6))
(defun ret-nil ())
(prints "ret-nil result:" (ret-nil))
(print (macroexpand 'defun '(bar (a b &rest c) 1 2 3)))

(prints "<<< RUN GARBAGE COLLECTOR >>>")
(defun run-gc ()
    (def gc-res (gc-collect))
    (def gc-atoms (head gc-res))
    (def gc-pairs (head (tail gc-res)))
    (def gc-objects (head (tail (tail gc-res))))
    (prints "garbage collected")
    (prints "\tatoms:" gc-atoms)
    (prints "\tpairs:" gc-pairs)
    (prints "\tobjects:" gc-objects)
)
(run-gc)

(prints "<<< context tests >>>")
(def global-val-1 "Unchanged")
(def global-val-2 "Unchanged")

(defun set-global-val ()
    (set global-val-1 "Changed") // global
    (def global-val-2 "Changed") // local
)
(set-global-val)
(prints "Changed value is" global-val-1)
(prints "Unchanged value is" global-val-2)

(prints "<<< set pair test >>>")
(def res '(1 2))
(set-head res 'head)
(set-tail res '(tail))
(print res)

(prints "             <<< eq >>>")
(prints "t   =" (eq 'a 'a))
(prints "t   =" (eq 1 1))
(prints "nil =" (eq 1 2))
(prints "nil =" (eq 'a 'b))
(prints "nil =" (eq '(1) '(1)))
(prints "             <<< and >>>")
(prints "t   =" (and 1 2))
(prints "nil =" (and 1 1 nil never-executed))
(prints "t   =" (and))
(prints "nil =" (and nil))
(prints "             <<< or >>>")
(prints "nil =" (or))
(prints "t   =" (or 1))
(prints "t   =" (or 1 nil never-executed))
(prints "             <<< not >>>")
(prints "t   =" (not nil))
(prints "nil =" (not '(2 3)))
(prints "             <<< xor >>>")
(prints "nil =" (xor))
(prints "nil =" (xor nil))
(prints "t   =" (xor 1))
(prints "t   =" (xor nil 1 nil))
(prints "nil =" (xor nil 1 nil 1))

(defmacro assert-equals (actual expected)
    `(unless (equals ,actual ,expected)
        (prints
            "Assertation failed"
            "\nActual:  " (quote ,actual) "-->" ,actual
            "\nExpected:" (quote ,expected) "-->" ,expected)))

(prints "                    <<< assert test >>> (2 == 2) (2 != 3)")
(assert-equals 2 2)
(assert-equals 2 3)
(prints "                    <<< test math >>>")
(prints "<< sum >>>")
(assert-equals (+) 0)
(assert-equals (+ 1) 1)
(assert-equals (+ 1 2) 3)
(assert-equals (+ 1 -2) -1)
(assert-equals (+ 1 -2 3) 2)
(assert-equals (+ (+ 1 2 -2) 2 (+ 1 2)) 6)
(assert-equals (+ (+ 1 2 -2) 2.0 (+ (- '1' '0') 2)) 6.0)
(prints "<< difference >>>")
(assert-equals (- 1) -1)
(assert-equals (- -1) 1)
(assert-equals (- 2 1) 1)
(assert-equals (- 3 0) 3)
(assert-equals (- 3 -3 4 5) -3)
(assert-equals (- '3' -3 '6' 5.0) -5.0)
(prints "<< product >>>")
(assert-equals (*) 1)
(assert-equals (* 0) 0)
(assert-equals (* 3) 3)
(assert-equals (* 2 3) 6)
(assert-equals (* 2 3 5) 30)
(assert-equals (* 2 3 -5) -30)
(prints "<< quotient >>>")
(assert-equals (/ 1) 1)
(assert-equals (/ 3) 0)
(assert-equals (/ 2.0) 0.5)
(assert-equals (/ -2.0) -0.5)
(assert-equals (/ -1) -1)
(assert-equals (/ -1.0) -1.0)
(assert-equals (/ 6 2) 3)
(assert-equals (/ 6 3) 2)
(assert-equals (/ 6 4) 1)
(assert-equals (/ 6 6) 1)
(assert-equals (/ 6 7) 0)
(assert-equals (/ 6 2 1) 3)
(assert-equals (/ 6 2 2) 1)
(assert-equals (/ 8 2.0 2) 2.0)
(assert-equals (/ 9 2 2) 2)
(prints "<< remainder >>>")
(assert-equals (% 6 2) 0)
(assert-equals (% 6 3) 0)
(assert-equals (% 6 4) 2)
(assert-equals (% 6 6) 0)
(assert-equals (% 6 7) 6)
(assert-equals (% '1' '2') '1')
(assert-equals (% '2' '1') (- '1' '0'))

(prints "                    <<< numbers test >>>")
(prints "<<< parsing tests >>>")
(assert-equals -1 (- 1))
(assert-equals 0xff 255)
(assert-equals 0xA 10)
(assert-equals 0o12 10)
(assert-equals 0b1010 10)
(assert-equals 0o12 0xA)
(assert-equals 0b1010 0xA)
(assert-equals 0b1010 0o12)
(prints "<<< comparision tests >>>")
(assert-equals (<) T)
(assert-equals (< 1) T)
(assert-equals (< 1 2) T)
(assert-equals (< 1 2 3) T)
(assert-equals (< 1 2 2) nil)
(assert-equals (< 1 2 0) nil)
(assert-equals (< 1.0 2 '3') T)
(assert-equals (< 1.0 '3' 2) nil)
(assert-equals (<=) T)
(assert-equals (<= 1) T)
(assert-equals (<= 1 2) T)
(assert-equals (<= 1 2 3) T)
(assert-equals (<= 1 2 2) T)
(assert-equals (<= 1 2 0) nil)
(assert-equals (<= 1.0 2 '3') T)
(assert-equals (<= 1.0 '3' 2) nil)
(assert-equals (<= 1.5 2 2 2.5 2.7 'A') T)
(assert-equals (==) T)
(assert-equals (== 1) T)
(assert-equals (== 1 '1') nil)
(assert-equals (== 0 '\0') T)
(assert-equals (== 1 1.0) T)
(assert-equals (== 32 32.0 ' ') T)

(prints "                    <<< predicates test >>>")
(assert-equals (atom? 'a) T)
(assert-equals (atom? nil) T)

(assert-equals (pair? (cons 'a 'b)) T)
(assert-equals (pair? '(a b)) T)
(assert-equals (pair? nil) nil)

(assert-equals (char? '1') T)
(assert-equals (char? 1) nil)
(assert-equals (char? 1.0) nil)
(assert-equals (char? "1") nil)

(assert-equals (int? 1) T)
(assert-equals (int? '1') nil)
(assert-equals (int? 1.0) nil)

(assert-equals (real? 1.0) T)
(assert-equals (string? "") T)
(assert-equals (function? lambda) T)
(assert-equals (function? (lambda nil nil)) T)
(assert-equals (macro? lambda) nil)
(assert-equals (macro? (getm defmacro)) T)

(assert-equals (integer? 1) T)
(assert-equals (integer? 'a') T)
(assert-equals (integer? 1.0) nil)

(assert-equals (number? 1) T)
(assert-equals (number? 'a') T)
(assert-equals (number? 1.0) T)
(assert-equals (number? nil) nil)

(assert-equals (list? nil) T)
(assert-equals (list? '(1)) T)
(assert-equals (list? '(1 2 3)) T)
(assert-equals (list? (cons 'a 'b)) nil)
(assert-equals (list? (cons 'a (cons 'b 'c))) nil)
(assert-equals (list? 'a) nil)
(assert-equals (list? 1) nil)

(let ((a 2) (b 3) (c) (d a))
    (prints "a(2) =" a)
    (prints "b(3) =" b)
    (prints "c(nil) =" c)
    (prints "d(2) =" d)
)

(let nil nil)
(let ((a)) a)
(let ((a 1)) a)

(when T
    (prints "success")
    (prints "======="))
(when nil
    (prints "FAILED")
    (prints "======="))
(unless nil
    (prints "success")
    (prints "======="))
(unless T
    (prints "FAILED")
    (prints "======="))
(run-gc)

(prints "                    <<< stdlib tests >>>")
(assert-equals (length '(1 2 3 4)) 4)
(assert-equals (length '(1 2 () 4)) 4)
(assert-equals (length '()) 0)

(prints "                    <<< str-lib tests >>>")
(prints "<<< str-len >>>")
(assert-equals (str-len "") 0)
(assert-equals (str-len "123") 3)
(assert-equals (str-len "12\034") 5)
(assert-equals (str-len "1234\0\0") 6)

(prints "<<< str-at >>>")
(assert-equals (str-at "1" 0) '1')
(assert-equals (str-at "\0" 0) '\0')
(assert-equals (str-at "01234" 3) '3')
(assert-equals (str-at "01234" 4) '4')

(prints "<<< str-to-list >>>")
(assert-equals (str-to-list "0123456" 2) '( '2' '3' '4' '5' '6'))
(assert-equals (str-to-list "0123456" 2 3) '( '2' '3' '4'))
(assert-equals (str-to-list "0123456" 0 0) nil)

//(prints "<<< str-from-list >>>")
// Ambigous syntax: quote before list of chars
// Solution put a space between oppening bracket and first item
(assert-equals (str-from-list '( '0' '1' '2')) "012")
(assert-equals (str-from-list nil) "")

(prints "<<< str-repeat >>>")
(assert-equals (str-repeat '1' 4) "1111")
(assert-equals (str-repeat '1' 0) "")
(assert-equals (str-repeat "12" 4) "12121212")
(assert-equals (str-repeat "12" 0) "")

(prints "<<< str-cmp >>>")
(assert-equals (str-cmp "" "") 0)
(assert-equals (str-cmp "1" "1") 0)
(assert-equals (str-cmp "!!23" 2 "0123" 2) 0)
(assert-equals (str-cmp "0" 0  1 "0123" 0 1) 0)

(assert-equals (str-cmp "1" "12") -1)
(assert-equals (str-cmp "1" "2") -1)
(assert-equals (str-cmp "!!23" 2 "0124" 2) -1)
(assert-equals (str-cmp "0" 0  1 "1123" 0 1) -1)

(assert-equals (str-cmp "12" "1") 1)
(assert-equals (str-cmp "11" "1") 1)
(assert-equals (str-cmp "!!23" 2 "0122" 2) 1)
(assert-equals (str-cmp "0" 0  1 "!123" 0 1) 1)

//(prints "<<< str-cat >>>")
(assert-equals (str-cat) "")
(assert-equals (str-cat "") "")
(assert-equals (str-cat "" "") "")

(assert-equals (str-cat "1") "1")
(assert-equals (str-cat "ab") "ab")
(assert-equals (str-cat "abc\0def") "abc\0def")

(assert-equals (str-cat "" "1") "1")
(assert-equals (str-cat "" "1" "") "1")
(assert-equals (str-cat "" "1" "2") "12")
(assert-equals (str-cat "" "1" "2" "\0") "12\0")

(assert-equals (str-cat "!" "1") "!1")
(assert-equals (str-cat "!" "1" "") "!1")
(assert-equals (str-cat "!" "1" "2") "!12")
(assert-equals (str-cat "!" "1" "2" "\0") "!12\0")

(prints "<<< str-ind >>>")
(assert-equals (str-ind "" "") 0)
(assert-equals (str-ind "123" "") 0)
(assert-equals (str-ind "123" "abc") -1)
(assert-equals (str-ind "0123456789" "45") 4)
(assert-equals (str-ind "012345456789" "45") 4)
(assert-equals (str-ind "+-+-45456789" "45" 5 3) 6)
(assert-equals (str-ind "=-=-4545=-=-" "45" 6) 6)
(assert-equals (str-ind "=-=-4545=-=-" "45" 5) 6)
(assert-equals (str-ind "=-=-4545=-=-" "45" 5 2) -1)
(assert-equals (str-ind "=-=-4545=-=-" "45" 5 4) 6)
(assert-equals (str-ind "=-=-0123=-=-" "0" 4 4) 4)
(assert-equals (str-ind "=-=-0123=-=-" "01" 4 4) 4)
(assert-equals (str-ind "=-=-0123=-=-" "3" 4 4) 7)
(assert-equals (str-ind "=-=-0123=-=-" "23" 4 4) 6)
(assert-equals (str-ind "=-=-0123=-=-" "0123" 4 4) 4)
(assert-equals (str-ind "=-=-0123=-=-" "0123=" 4 4) -1)
(assert-equals (str-ind "=-=-0123=-=-" "-0123" 4 4) -1)

(assert-equals (str-ind "" 'a') -1)
(assert-equals (str-ind "-123=" '1') 1)
(assert-equals (str-ind "-123=" '3') 3)
(assert-equals (str-ind "-123=" '1' 1 3) 1)
(assert-equals (str-ind "-123=" '3' 1 3) 3)
(assert-equals (str-ind "-123=" '1' 1 0) -1)
(assert-equals (str-ind "-123=" '1' 5 0) -1)
(assert-equals (str-ind "-123=" '-' 1 3) -1)
(assert-equals (str-ind "-123=" '=' 1 3) -1)

(prints "<<< str-last-ind >>>")
(assert-equals (str-last-ind "" "") 0)
(assert-equals (str-last-ind "012" "0") 0)
(assert-equals (str-last-ind "123" "") 3)
(assert-equals (str-last-ind "123" "abc") -1)
(assert-equals (str-last-ind "0123456789" "45") 4)
(assert-equals (str-last-ind "012345456789" "45") 6)
(assert-equals (str-last-ind "+-+-45456789" "45" 5 3) 4)
(assert-equals (str-last-ind "+-+-45456789" "45" 6 3) 4)
(assert-equals (str-last-ind "+-+-45456789" "45" 7 3) 6)
(assert-equals (str-last-ind "=-=-4545=-=-" "45" 6 2) -1)
(assert-equals (str-last-ind "=-=-4545=-=-" "45" 5 2) 4)
(assert-equals (str-last-ind "=-=-4545=-=-" "45" 7 2) 6)
/*(assert-equals (str-last-ind "=-=-4545=-=-" "5=" 7 2) -1)
(assert-equals (str-last-ind "=-=-4545=-=-" "-4" 5 2) -1)
(assert-equals (str-last-ind "111" "1" 1 0) -1)
(assert-equals (str-last-ind "111" "1" 3 0) -1)
(assert-equals (str-last-ind "111" "1" 3 1) -1)
(assert-equals (str-last-ind "111" "1" 3 2) 2)
(assert-equals (str-last-ind "111" "" 3 0) 3)
(assert-equals (str-last-ind "111" "" 3 1) 3)
(assert-equals (str-last-ind "111" "" 3 2) 3)
(assert-equals (str-last-ind "012" "1") 1)
(assert-equals (str-last-ind "012" "2") 2)
(assert-equals (str-last-ind "0122" "2") 3)
(assert-equals (str-last-ind "0122" "2" 2) 2)

(assert-equals (str-last-ind "" '0') -1)
(assert-equals (str-last-ind "-1233=" '1') 1)
(assert-equals (str-last-ind "-1233=" '3') 4)
(assert-equals (str-last-ind "-1233=" '1' 4 4) 1)
(assert-equals (str-last-ind "-1233=" '3' 4 4) 4)
(assert-equals (str-last-ind "-1233=" '-' 4 4) -1)
(assert-equals (str-last-ind "-1233=" '=' 4 4) -1)
(assert-equals (str-last-ind "-1233=" '3' 3 3) 3)
(assert-equals (str-last-ind "-1233=" '1' 1 0) -1)
(assert-equals (str-last-ind "-1233=" '3' 6 0) -1)
(assert-equals (str-last-ind "-1233=" '=' 6 1) -1)
(assert-equals (str-last-ind "-1233=" '=' 6 2) 5)

(assert-equals (str-last-ind "012" '0') 0)
(assert-equals (str-last-ind "111" '1' 1 0) -1)
(assert-equals (str-last-ind "111" '1' 3 0) -1)
(assert-equals (str-last-ind "111" '1' 3 1) -1)
(assert-equals (str-last-ind "111" '1' 3 2) 2)
(assert-equals (str-last-ind "012" '1') 1)
(assert-equals (str-last-ind "012" '2') 2)
(assert-equals (str-last-ind "0122" '2') 3)
(assert-equals (str-last-ind "0122" '2' 2) 2)*/
